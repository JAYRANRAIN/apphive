/* snapd-glib.vapi generated by vapigen-0.36, do not modify. */

[CCode (cprefix = "Snapd", gir_namespace = "Snapd", gir_version = "1", lower_case_cprefix = "snapd_")]
namespace Snapd {
	[CCode (cheader_filename = "snapd-glib/snapd-glib.h", type_id = "snapd_alias_get_type ()")]
	[Version (since = "1.8")]
	public class Alias : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Alias ();
		public unowned string get_app ();
		public unowned string get_name ();
		public unowned string get_snap ();
		public Snapd.AliasStatus get_status ();
		public string app { get; construct; }
		public string name { get; construct; }
		public string snap { get; construct; }
		public Snapd.AliasStatus status { get; construct; }
	}
	[CCode (cheader_filename = "snapd-glib/snapd-glib.h", type_id = "snapd_app_get_type ()")]
	[Version (since = "1.0")]
	public class App : GLib.Object {
		[CCode (has_construct_function = false)]
		protected App ();
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "1.7")]
		public unowned string[] get_aliases ();
		[Version (since = "1.9")]
		public unowned Snapd.DaemonType? get_daemon_type ();
		[Version (since = "1.14")]
		public unowned string? get_desktop_file ();
		public unowned string get_name ();
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] aliases { get; construct; }
		public Snapd.DaemonType daemon_type { get; construct; }
		public string desktop_file { get; construct; }
		public string name { get; construct; }
	}
	[CCode (cheader_filename = "snapd-glib/snapd-glib.h", type_id = "snapd_assertion_get_type ()")]
	[Version (since = "1.0")]
	public class Assertion : GLib.Object {
		[CCode (has_construct_function = false)]
		public Assertion (string content);
		public string? get_body ();
		public string? get_header (string name);
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] get_headers ();
		public string get_signature ();
		[NoAccessorMethod]
		public string content { owned get; construct; }
	}
	[CCode (cheader_filename = "snapd-glib/snapd-glib.h", type_id = "snapd_auth_data_get_type ()")]
	[Version (since = "1.0")]
	public class AuthData : GLib.Object {
		[CCode (has_construct_function = false)]
		public AuthData (string macaroon, [CCode (array_length = false, array_null_terminated = true)] string[] discharges);
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[] get_discharges ();
		public unowned string get_macaroon ();
		[CCode (array_length = false, array_null_terminated = true)]
		[NoAccessorMethod]
		public string[] discharges { owned get; set; }
		[NoAccessorMethod]
		public string macaroon { owned get; set; }
	}
	[CCode (cheader_filename = "snapd-glib/snapd-glib.h", type_id = "snapd_change_get_type ()")]
	[Version (since = "1.5")]
	public class Change : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Change ();
		public unowned string get_id ();
		public unowned string get_kind ();
		public bool get_ready ();
		public unowned GLib.DateTime? get_ready_time ();
		public unowned GLib.DateTime get_spawn_time ();
		public unowned string get_status ();
		public unowned string get_summary ();
		public unowned GLib.GenericArray<Snapd.Task> get_tasks ();
		public string id { get; construct; }
		public string kind { get; construct; }
		public bool ready { get; construct; }
		public GLib.DateTime ready_time { get; construct; }
		public GLib.DateTime spawn_time { get; construct; }
		public string status { get; construct; }
		public string summary { get; construct; }
		public GLib.GenericArray<void*> tasks { get; construct; }
	}
	[CCode (cheader_filename = "snapd-glib/snapd-glib.h", type_id = "snapd_client_get_type ()")]
	[Version (since = "1.0")]
	public class Client : GLib.Object {
		[CCode (has_construct_function = false)]
		public Client ();
		[Version (since = "1.8")]
		public async bool add_assertions_async (string assertions, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.8")]
		public bool add_assertions_sync (string assertions, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.3")]
		public async bool buy_async (string id, double amount, string currency, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.3")]
		public bool buy_sync (string id, double amount, string currency, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.3")]
		public async bool check_buy_async (GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.3")]
		public bool check_buy_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.3")]
		public async bool connect_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public async bool connect_interface_async (string plug_snap, string plug_name, string slot_snap, string slot_name, [CCode (delegate_target_pos = 5.5, scope = "async")] Snapd.ProgressCallback? progress_callback, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool connect_interface_sync (string plug_snap, string plug_name, string slot_snap, string slot_name, [CCode (delegate_target_pos = 5.5, scope = "async")] Snapd.ProgressCallback? progress_callback, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool connect_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.3")]
		public async Snapd.UserInformation create_user_async (string email, Snapd.CreateUserFlags flags, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.3")]
		public Snapd.UserInformation create_user_sync (string email, Snapd.CreateUserFlags flags, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.3")]
		public async GLib.GenericArray<weak Snapd.UserInformation> create_users_async (GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.3")]
		public GLib.GenericArray<weak Snapd.UserInformation> create_users_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.8")]
		public async bool disable_aliases_async (string snap, string aliases, [CCode (delegate_target_pos = 3.5, scope = "async")] Snapd.ProgressCallback? progress_callback, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.8")]
		public bool disable_aliases_sync (string snap, string aliases, [CCode (delegate_target_pos = 3.5, scope = "async")] Snapd.ProgressCallback? progress_callback, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool disable_async (string name, [CCode (delegate_target_pos = 2.5, scope = "async")] Snapd.ProgressCallback? progress_callback, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool disable_sync (string name, [CCode (delegate_target_pos = 2.5)] Snapd.ProgressCallback? progress_callback, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool disconnect_interface_async (string plug_snap, string plug_name, string slot_snap, string slot_name, [CCode (delegate_target_pos = 5.5, scope = "async")] Snapd.ProgressCallback? progress_callback, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool disconnect_interface_sync (string plug_snap, string plug_name, string slot_snap, string slot_name, [CCode (delegate_target_pos = 5.5)] Snapd.ProgressCallback? progress_callback, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.8")]
		public async bool enable_aliases_async (string snap, string aliases, [CCode (delegate_target_pos = 3.5, scope = "async")] Snapd.ProgressCallback? progress_callback, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.8")]
		public bool enable_aliases_sync (string snap, string aliases, [CCode (delegate_target_pos = 3.5, scope = "async")] Snapd.ProgressCallback? progress_callback, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool enable_async (string name, [CCode (delegate_target_pos = 2.5, scope = "async")] Snapd.ProgressCallback? progress_callback, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool enable_sync (string name, [CCode (delegate_target_pos = 2.5)] Snapd.ProgressCallback? progress_callback, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async GLib.GenericArray<weak Snapd.Snap> find_async (Snapd.FindFlags flags, string query, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.8")]
		public async GLib.GenericArray<weak Snapd.Snap> find_refreshable_async (GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.8")]
		public GLib.GenericArray<weak Snapd.Snap> find_refreshable_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.7")]
		public async GLib.GenericArray<weak Snapd.Snap> find_section_async (Snapd.FindFlags flags, string? section, string? query, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.7")]
		public GLib.GenericArray<weak Snapd.Snap> find_section_sync (Snapd.FindFlags flags, string? section, string? query, string? suggested_currency, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public GLib.GenericArray<weak Snapd.Snap> find_sync (Snapd.FindFlags flags, string query, string? suggested_currency, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (has_construct_function = false)]
		[Version (since = "1.5")]
		public Client.from_socket (GLib.Socket socket);
		[Version (since = "1.8")]
		public async GLib.GenericArray<weak Snapd.Alias> get_aliases_async (GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.8")]
		public GLib.GenericArray<weak Snapd.Alias> get_aliases_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.19")]
		public bool get_allow_interaction ();
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "1.8")]
		public async string[] get_assertions_async (string type, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "1.8")]
		public string[] get_assertions_sync (string type, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public unowned Snapd.AuthData? get_auth_data ();
		public async Snapd.Icon get_icon_async (string name, GLib.Cancellable? cancellable) throws GLib.Error;
		public Snapd.Icon get_icon_sync (string name, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool get_interfaces_async (GLib.Cancellable? cancellable, out GLib.GenericArray<weak Snapd.Plug> plugs, out GLib.GenericArray<weak Snapd.Slot> slots) throws GLib.Error;
		public bool get_interfaces_sync (out GLib.GenericArray<weak Snapd.Plug> plugs, out GLib.GenericArray<weak Snapd.Slot> slots, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "1.7")]
		public async string[] get_sections_async (GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "1.7")]
		public string[] get_sections_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async Snapd.SystemInformation get_system_information_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public Snapd.SystemInformation get_system_information_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.16")]
		public unowned string get_user_agent ();
		[Version (since = "1.12")]
		public async bool install2_async (Snapd.InstallFlags flags, string name, string? channel, string? revision, [CCode (delegate_target_pos = 5.5, scope = "async")] Snapd.ProgressCallback? progress_callback, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.12")]
		public bool install2_sync (Snapd.InstallFlags flags, string name, string? channel, string? revision, [CCode (delegate_target_pos = 5.5)] Snapd.ProgressCallback? progress_callback, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
		public async bool install_async (string name, string? channel, [CCode (delegate_target_pos = 3.5, scope = "async")] Snapd.ProgressCallback? progress_callback, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.9")]
		public async bool install_stream_async (Snapd.InstallFlags flags, GLib.InputStream stream, [CCode (delegate_target_pos = 3.5, scope = "async")] Snapd.ProgressCallback? progress_callback, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.9")]
		public bool install_stream_sync (Snapd.InstallFlags flags, GLib.InputStream stream, [CCode (delegate_target_pos = 3.5)] Snapd.ProgressCallback? progress_callback, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
		public bool install_sync (string name, string? channel, [CCode (delegate_target_pos = 3.5)] Snapd.ProgressCallback? progress_callback, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async GLib.GenericArray<weak Snapd.Snap> list_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public async Snapd.Snap list_one_async (string name, GLib.Cancellable? cancellable) throws GLib.Error;
		public Snapd.Snap list_one_sync (string name, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public GLib.GenericArray<weak Snapd.Snap> list_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async Snapd.AuthData login_async (string username, string password, string? otp, GLib.Cancellable? cancellable) throws GLib.Error;
		public Snapd.AuthData login_sync (string username, string password, string? otp, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "1.5")]
		public async string[] refresh_all_async ([CCode (delegate_target_pos = 1.5, scope = "async")] Snapd.ProgressCallback? progress_callback, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "1.5")]
		public string[] refresh_all_sync ([CCode (delegate_target_pos = 1.5)] Snapd.ProgressCallback? progress_callback, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool refresh_async (string name, string? channel, [CCode (delegate_target_pos = 3.5, scope = "async")] Snapd.ProgressCallback? progress_callback, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool refresh_sync (string name, string? channel, [CCode (delegate_target_pos = 3.5)] Snapd.ProgressCallback? progress_callback, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool remove_async (string name, [CCode (delegate_target_pos = 2.5, scope = "async")] Snapd.ProgressCallback? progress_callback, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool remove_sync (string name, [CCode (delegate_target_pos = 2.5)] Snapd.ProgressCallback? progress_callback, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.8")]
		public async bool reset_aliases_async (string snap, string aliases, [CCode (delegate_target_pos = 3.5, scope = "async")] Snapd.ProgressCallback? progress_callback, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.8")]
		public bool reset_aliases_sync (string snap, string aliases, [CCode (delegate_target_pos = 3.5, scope = "async")] Snapd.ProgressCallback? progress_callback, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.8")]
		public async bool run_snapctl_async (string context_id, string args, GLib.Cancellable? cancellable, out string stdout_output, out string stderr_output) throws GLib.Error;
		[Version (since = "1.8")]
		public bool run_snapctl_sync (string context_id, string args, out string stdout_output, out string stderr_output, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.19")]
		public void set_allow_interaction (bool allow_interaction);
		public void set_auth_data (Snapd.AuthData? auth_data);
		[Version (since = "1.16")]
		public void set_user_agent (string? user_agent);
		[Version (since = "1.9")]
		public async bool try_async (string path, [CCode (delegate_target_pos = 2.5, scope = "async")] Snapd.ProgressCallback? progress_callback, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.9")]
		public bool try_sync (string path, [CCode (delegate_target_pos = 2.5)] Snapd.ProgressCallback? progress_callback, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "snapd-glib/snapd-glib.h", type_id = "snapd_connection_get_type ()")]
	[Version (since = "1.0")]
	public class Connection : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Connection ();
		public unowned string get_name ();
		public unowned string get_snap ();
		public string name { get; construct; }
		public string snap { get; construct; }
	}
	[CCode (cheader_filename = "snapd-glib/snapd-glib.h", type_id = "snapd_icon_get_type ()")]
	[Version (since = "1.0")]
	public class Icon : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Icon ();
		public unowned GLib.Bytes get_data ();
		public unowned string get_mime_type ();
		public GLib.Bytes data { get; construct; }
		public string mime_type { get; construct; }
	}
	[CCode (cheader_filename = "snapd-glib/snapd-glib.h", type_id = "snapd_login_request_get_type ()")]
	public class LoginRequest : GLib.Object, GLib.AsyncResult {
		[CCode (has_construct_function = false)]
		protected LoginRequest ();
	}
	[CCode (cheader_filename = "snapd-glib/snapd-glib.h", type_id = "snapd_plug_get_type ()")]
	[Version (since = "1.0")]
	public class Plug : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Plug ();
		[Version (since = "1.3")]
		public unowned GLib.Variant? get_attribute (string name);
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "1.3")]
		public string[] get_attribute_names (out uint length);
		public unowned GLib.GenericArray<Snapd.Connection> get_connections ();
		public unowned string get_interface ();
		public unowned string get_label ();
		public unowned string get_name ();
		public unowned string get_snap ();
		[Version (since = "1.3")]
		public bool has_attribute (string name);
		[NoAccessorMethod]
		public GLib.HashTable<void*,void*> attributes { owned get; construct; }
		public GLib.GenericArray<void*> connections { get; construct; }
		public string @interface { get; construct; }
		public string label { get; construct; }
		public string name { get; construct; }
		public string snap { get; construct; }
	}
	[CCode (cheader_filename = "snapd-glib/snapd-glib.h", type_id = "snapd_price_get_type ()")]
	[Version (since = "1.0")]
	public class Price : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Price ();
		public double get_amount ();
		public unowned string get_currency ();
		public double amount { get; construct; }
		public string currency { get; construct; }
	}
	[CCode (cheader_filename = "snapd-glib/snapd-glib.h", type_id = "snapd_screenshot_get_type ()")]
	[Version (since = "1.0")]
	public class Screenshot : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Screenshot ();
		public uint get_height ();
		public unowned string get_url ();
		public uint get_width ();
		public uint height { get; construct; }
		public string url { get; construct; }
		public uint width { get; construct; }
	}
	[CCode (cheader_filename = "snapd-glib/snapd-glib.h", type_id = "snapd_slot_get_type ()")]
	[Version (since = "1.0")]
	public class Slot : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Slot ();
		[Version (since = "1.3")]
		public unowned GLib.Variant? get_attribute (string name);
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "1.3")]
		public string[] get_attribute_names (out uint length);
		public unowned GLib.GenericArray<Snapd.Connection> get_connections ();
		public unowned string get_interface ();
		public unowned string get_label ();
		public unowned string get_name ();
		public unowned string get_snap ();
		[Version (since = "1.3")]
		public bool has_attribute (string name);
		[NoAccessorMethod]
		public GLib.HashTable<void*,void*> attributes { owned get; construct; }
		public GLib.GenericArray<void*> connections { get; construct; }
		public string @interface { get; construct; }
		public string label { get; construct; }
		public string name { get; construct; }
		public string snap { get; construct; }
	}
	[CCode (cheader_filename = "snapd-glib/snapd-glib.h", type_id = "snapd_snap_get_type ()")]
	[Version (since = "1.0")]
	public class Snap : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Snap ();
		public unowned GLib.GenericArray<Snapd.App> get_apps ();
		public unowned string get_channel ();
		public Snapd.Confinement get_confinement ();
		[Version (since = "1.13")]
		public unowned string get_contact ();
		public unowned string get_description ();
		public unowned string get_developer ();
		public bool get_devmode ();
		public int64 get_download_size ();
		public unowned string get_icon ();
		public unowned string get_id ();
		public unowned GLib.DateTime? get_install_date ();
		public int64 get_installed_size ();
		[Version (since = "1.8")]
		public bool get_jailmode ();
		[Version (since = "1.19")]
		public unowned string? get_license ();
		public unowned string get_name ();
		public unowned GLib.GenericArray<Snapd.Price> get_prices ();
		public bool get_private ();
		public unowned string get_revision ();
		public unowned GLib.GenericArray<Snapd.Screenshot> get_screenshots ();
		public Snapd.SnapType get_snap_type ();
		public Snapd.SnapStatus get_status ();
		public unowned string get_summary ();
		[Version (since = "1.14")]
		public unowned string? get_title ();
		[Version (since = "1.7")]
		public unowned string get_tracking_channel ();
		public bool get_trymode ();
		public unowned string get_version ();
		public GLib.GenericArray<void*> apps { get; construct; }
		public string channel { get; construct; }
		public Snapd.Confinement confinement { get; construct; }
		public string contact { get; construct; }
		public string description { get; construct; }
		public string developer { get; construct; }
		public bool devmode { get; construct; }
		public int64 download_size { get; construct; }
		public string icon { get; construct; }
		public string id { get; construct; }
		public GLib.DateTime install_date { get; construct; }
		public int64 installed_size { get; construct; }
		public bool jailmode { get; construct; }
		public string license { get; construct; }
		public string name { get; construct; }
		public GLib.GenericArray<void*> prices { get; construct; }
		public bool @private { get; construct; }
		public string revision { get; construct; }
		public GLib.GenericArray<void*> screenshots { get; construct; }
		public Snapd.SnapType snap_type { get; construct; }
		public Snapd.SnapStatus status { get; construct; }
		public string summary { get; construct; }
		public string title { get; construct; }
		public string tracking_channel { get; construct; }
		public bool trymode { get; construct; }
		public string version { get; construct; }
	}
	[CCode (cheader_filename = "snapd-glib/snapd-glib.h", type_id = "snapd_system_information_get_type ()")]
	[Version (since = "1.0")]
	public class SystemInformation : GLib.Object {
		[CCode (has_construct_function = false)]
		protected SystemInformation ();
		[Version (since = "1.11")]
		public unowned string get_binaries_directory ();
		[Version (since = "1.15")]
		public Snapd.SystemConfinement get_confinement ();
		[Version (since = "1.11")]
		public unowned string get_kernel_version ();
		[Version (since = "1.7")]
		public bool get_managed ();
		[Version (since = "1.11")]
		public unowned string get_mount_directory ();
		public bool get_on_classic ();
		public unowned string get_os_id ();
		public unowned string get_os_version ();
		public unowned string get_series ();
		[Version (since = "1.7")]
		public unowned string? get_store ();
		public unowned string get_version ();
		public string binaries_directory { get; construct; }
		public Snapd.SystemConfinement confinement { get; construct; }
		public string kernel_version { get; construct; }
		public bool managed { get; construct; }
		public string mount_directory { get; construct; }
		public bool on_classic { get; construct; }
		public string os_id { get; construct; }
		public string os_version { get; construct; }
		public string series { get; construct; }
		public string store { get; construct; }
		public string version { get; construct; }
	}
	[CCode (cheader_filename = "snapd-glib/snapd-glib.h", type_id = "snapd_task_get_type ()")]
	[Version (since = "1.0")]
	public class Task : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Task ();
		public unowned string get_id ();
		public unowned string get_kind ();
		public int64 get_progress_done ();
		[Version (since = "1.5")]
		public unowned string get_progress_label ();
		public int64 get_progress_total ();
		public bool get_ready ();
		public unowned GLib.DateTime? get_ready_time ();
		public unowned GLib.DateTime get_spawn_time ();
		public unowned string get_status ();
		public unowned string get_summary ();
		public string id { get; construct; }
		public string kind { get; construct; }
		public int64 progress_done { get; construct; }
		public string progress_label { get; construct; }
		public int64 progress_total { get; construct; }
		public bool ready { get; construct; }
		public GLib.DateTime ready_time { get; construct; }
		public GLib.DateTime spawn_time { get; construct; }
		public string status { get; construct; }
		public string summary { get; construct; }
	}
	[CCode (cheader_filename = "snapd-glib/snapd-glib.h", type_id = "snapd_user_information_get_type ()")]
	[Version (since = "1.3")]
	public class UserInformation : GLib.Object {
		[CCode (has_construct_function = false)]
		protected UserInformation ();
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[] get_ssh_keys ();
		public unowned string get_username ();
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] ssh_keys { get; construct; }
		public string username { get; construct; }
	}
	[CCode (cheader_filename = "snapd-glib/snapd-glib.h", cname = "_SnapdAliasClass", has_type_id = false)]
	public struct _AliasClass {
	}
	[CCode (cheader_filename = "snapd-glib/snapd-glib.h", cname = "_SnapdAppClass", has_type_id = false)]
	public struct _AppClass {
	}
	[CCode (cheader_filename = "snapd-glib/snapd-glib.h", cname = "_SnapdAssertionClass", has_type_id = false)]
	public struct _AssertionClass {
	}
	[CCode (cheader_filename = "snapd-glib/snapd-glib.h", cname = "_SnapdAuthDataClass", has_type_id = false)]
	public struct _AuthDataClass {
	}
	[CCode (cheader_filename = "snapd-glib/snapd-glib.h", cname = "_SnapdChangeClass", has_type_id = false)]
	public struct _ChangeClass {
	}
	[CCode (cheader_filename = "snapd-glib/snapd-glib.h", cname = "_SnapdConnectionClass", has_type_id = false)]
	public struct _ConnectionClass {
	}
	[CCode (cheader_filename = "snapd-glib/snapd-glib.h", cname = "_SnapdIconClass", has_type_id = false)]
	public struct _IconClass {
	}
	[CCode (cheader_filename = "snapd-glib/snapd-glib.h", cname = "_SnapdPlugClass", has_type_id = false)]
	public struct _PlugClass {
	}
	[CCode (cheader_filename = "snapd-glib/snapd-glib.h", cname = "_SnapdPriceClass", has_type_id = false)]
	public struct _PriceClass {
	}
	[CCode (cheader_filename = "snapd-glib/snapd-glib.h", cname = "_SnapdScreenshotClass", has_type_id = false)]
	public struct _ScreenshotClass {
	}
	[CCode (cheader_filename = "snapd-glib/snapd-glib.h", cname = "_SnapdSlotClass", has_type_id = false)]
	public struct _SlotClass {
	}
	[CCode (cheader_filename = "snapd-glib/snapd-glib.h", cname = "_SnapdSnapClass", has_type_id = false)]
	public struct _SnapClass {
	}
	[CCode (cheader_filename = "snapd-glib/snapd-glib.h", cname = "_SnapdSystemInformationClass", has_type_id = false)]
	public struct _SystemInformationClass {
	}
	[CCode (cheader_filename = "snapd-glib/snapd-glib.h", cname = "_SnapdTaskClass", has_type_id = false)]
	public struct _TaskClass {
	}
	[CCode (cheader_filename = "snapd-glib/snapd-glib.h", cname = "_SnapdUserInformationClass", has_type_id = false)]
	public struct _UserInformationClass {
	}
	[CCode (cheader_filename = "snapd-glib/snapd-glib.h", cprefix = "SNAPD_ALIAS_STATUS_", type_id = "snapd_alias_status_get_type ()")]
	[Version (since = "1.8")]
	public enum AliasStatus {
		UNKNOWN,
		DEFAULT,
		ENABLED,
		DISABLED,
		AUTO
	}
	[CCode (cheader_filename = "snapd-glib/snapd-glib.h", cprefix = "SNAPD_CONFINEMENT_", type_id = "snapd_confinement_get_type ()")]
	[Version (since = "1.0")]
	public enum Confinement {
		UNKNOWN,
		STRICT,
		DEVMODE,
		CLASSIC
	}
	[CCode (cheader_filename = "snapd-glib/snapd-glib.h", cprefix = "SNAPD_CREATE_USER_FLAGS_", type_id = "snapd_create_user_flags_get_type ()")]
	[Flags]
	[Version (since = "1.3")]
	public enum CreateUserFlags {
		NONE,
		SUDO,
		KNOWN
	}
	[CCode (cheader_filename = "snapd-glib/snapd-glib.h", cprefix = "SNAPD_DAEMON_TYPE_", type_id = "snapd_daemon_type_get_type ()")]
	[Version (since = "1.9")]
	public enum DaemonType {
		NONE,
		UNKNOWN,
		SIMPLE,
		FORKING,
		ONESHOT,
		DBUS,
		NOTIFY
	}
	[CCode (cheader_filename = "snapd-glib/snapd-glib.h", cprefix = "SNAPD_FIND_FLAGS_", type_id = "snapd_find_flags_get_type ()")]
	[Flags]
	[Version (since = "1.0")]
	public enum FindFlags {
		NONE,
		MATCH_NAME,
		SELECT_PRIVATE,
		SELECT_REFRESH
	}
	[CCode (cheader_filename = "snapd-glib/snapd-glib.h", cprefix = "SNAPD_INSTALL_FLAGS_", type_id = "snapd_install_flags_get_type ()")]
	[Flags]
	[Version (since = "1.12")]
	public enum InstallFlags {
		NONE,
		CLASSIC,
		DANGEROUS,
		DEVMODE,
		JAILMODE
	}
	[CCode (cheader_filename = "snapd-glib/snapd-glib.h", cprefix = "SNAPD_SNAP_STATUS_", type_id = "snapd_snap_status_get_type ()")]
	[Version (since = "1.0")]
	public enum SnapStatus {
		UNKNOWN,
		AVAILABLE,
		PRICED,
		INSTALLED,
		ACTIVE
	}
	[CCode (cheader_filename = "snapd-glib/snapd-glib.h", cprefix = "SNAPD_SNAP_TYPE_", type_id = "snapd_snap_type_get_type ()")]
	[Version (since = "1.0")]
	public enum SnapType {
		UNKNOWN,
		APP,
		KERNEL,
		GADGET,
		OS
	}
	[CCode (cheader_filename = "snapd-glib/snapd-glib.h", cprefix = "SNAPD_SYSTEM_CONFINEMENT_", type_id = "snapd_system_confinement_get_type ()")]
	[Version (since = "1.15")]
	public enum SystemConfinement {
		UNKNOWN,
		STRICT,
		PARTIAL
	}
	[CCode (cheader_filename = "snapd-glib/snapd-glib.h", cprefix = "SNAPD_ERROR_")]
	[Version (since = "1.0")]
	public errordomain Error {
		CONNECTION_FAILED,
		WRITE_FAILED,
		READ_FAILED,
		BAD_REQUEST,
		BAD_RESPONSE,
		AUTH_DATA_REQUIRED,
		AUTH_DATA_INVALID,
		TWO_FACTOR_REQUIRED,
		TWO_FACTOR_INVALID,
		PERMISSION_DENIED,
		FAILED,
		TERMS_NOT_ACCEPTED,
		PAYMENT_NOT_SETUP,
		PAYMENT_DECLINED,
		ALREADY_INSTALLED,
		NOT_INSTALLED,
		NO_UPDATE_AVAILABLE,
		PASSWORD_POLICY_ERROR,
		NEEDS_DEVMODE,
		NEEDS_CLASSIC,
		NEEDS_CLASSIC_SYSTEM;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "snapd-glib/snapd-glib.h", instance_pos = 3.9)]
	[Version (since = "1.0")]
	public delegate void ProgressCallback (Snapd.Client client, Snapd.Change change, void* deprecated);
	[CCode (cheader_filename = "snapd-glib/snapd-glib.h")]
	[Version (since = "1.0")]
	public static async Snapd.AuthData login_async (string username, string password, string? otp, GLib.Cancellable? cancellable) throws GLib.Error;
	[CCode (cheader_filename = "snapd-glib/snapd-glib.h")]
	[Version (since = "1.0")]
	public static Snapd.AuthData login_sync (string username, string password, string? otp, GLib.Cancellable? cancellable = null) throws GLib.Error;
}